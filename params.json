{"name":"composer/installers","tagline":"A Multi-Framework Composer Library Installer","body":"# A Multi-Framework [Composer](http://getcomposer.org) Library Installer\r\n\r\n[![Build Status](https://secure.travis-ci.org/composer/installers.png)](http://travis-ci.org/composer/installers)\r\n\r\nThis is for PHP package authors to require in their `composer.json`. It will\r\nmagically install their package to the correct location based on the specified\r\npackage type.\r\n\r\n**Current Supported Package Types**:\r\n\r\n* AGL           `agl-`\r\n* CakePHP 2+    `cakephp-`\r\n* CodeIgniter   `codeigniter-`\r\n* Drupal        `drupal-`\r\n* FuelPHP       `fuelphp-`\r\n* Joomla        `joomla-`\r\n* Kohana        `kohana-`\r\n* Laravel       `laravel-`\r\n* Lithium       `lithium-`\r\n* Magento       `magento-`\r\n* Mako          `mako-`\r\n* MediaWiki     `mediawiki-`\r\n* phpBB         `phpbb-`\r\n* PPI           `ppi-`\r\n* SilverStripe  `silverstripe-`\r\n* Symfony1      `symfony1-`\r\n* TYPO3 Flow    `typo3-flow-`\r\n* WordPress     `wordpress-`\r\n* Zend          `zend-`\r\n\r\n**Natively Supported Frameworks**:\r\n\r\nThe following frameworks natively work with Composer and will be\r\ninstalled to the default `vendor` directory. `composer/installers`\r\nis not needed to install packages with these frameworks:\r\n\r\n* Aura\r\n* Symfony2\r\n\r\n## Example `composer.json` File\r\n\r\nThis is an example for a CakePHP plugin. The only important parts to set in your\r\ncomposer.json file are `\"type\": \"cakephp-plugin\"` which describes what your\r\npackage is and `\"require\": { \"composer/installers\": \"*\" }` which tells composer\r\nto load the custom installers.\r\n\r\n``` json\r\n{\r\n    \"name\": \"you/ftp\",\r\n    \"type\": \"cakephp-plugin\",\r\n    \"require\": {\r\n        \"composer/installers\": \"*\"\r\n    }\r\n}\r\n```\r\n\r\nThis would install your package to the `app/Plugin/Ftp/` folder of a CakePHP app\r\nwhen a user runs `php composer.phar install`.\r\n\r\nSo submit your packages to [packagist.org](http://packagist.org)!\r\n\r\n## Current Supported Types\r\n\r\n* AGL\r\n    * agl-module\r\n* CakePHP\r\n    * **cakephp-plugin**\r\n* CodeIgniter\r\n    * codeigniter-library\r\n    * codeigniter-third-party\r\n    * codeigniter-module\r\n* Drupal\r\n    * **drupal-module**\r\n    * **drupal-theme**\r\n    * drupal-profile\r\n    * drupal-drush\r\n* FuelPHP\r\n    * fuelphp-module\r\n* Joomla\r\n    * joomla-component\r\n    * joomla-module\r\n    * joomla-template\r\n    * joomla-plugin\r\n    * joomla-library\r\n* Kohana\r\n    * **kohana-module**\r\n* Laravel\r\n    * laravel-library\r\n* Lithium\r\n    * **lithium-library**\r\n    * **lithium-source**\r\n* Magento\r\n    * magento-library\r\n    * magento-skin\r\n    * magento-theme\r\n* Mako\r\n    * mako-package\r\n* MediaWiki\r\n    * mediawiki-extension\r\n* phpBB\r\n    * phpbb-extension\r\n    * phpbb-style\r\n    * phpbb-language\r\n* PPI\r\n    * **ppi-module**\r\n* SilverStripe\r\n    * silverstripe-module\r\n    * silverstripe-theme\r\n* symfony1\r\n    * **symfony1-plugin**\r\n* TYPO3 Flow\r\n    * typo3-flow-package\r\n    * typo3-flow-framework\r\n    * typo3-flow-plugin\r\n    * typo3-flow-site\r\n    * typo3-flow-build\r\n    * typo3-flow-yourlib\r\n* WordPress\r\n    * **wordpress-plugin**\r\n    * **wordpress-theme**\r\n* Zend\r\n    * zend-library\r\n    * zend-extra\r\n\r\nTypes in **bold** have been marked stable and you can rely on those install\r\npaths to not change. A new type must be created if any adjustments are\r\nrequested for an install path.\r\n\r\n## Custom Install Paths\r\n\r\nIf you are consuming a package that uses the `composer/installers` you can\r\noverride the install path with the following extra in your `composer.json`:\r\n\r\n``` json\r\n{\r\n    \"extra\": {\r\n        \"installer-paths\": {\r\n            \"your/custom/path/{$name}/\": [\"shama/ftp\", \"vendor/package\"]\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis would use your custom path for each of the listed packages. The available\r\nvariables to use in your paths are: `${name}`, `{$vendor}`, `{$type}`.\r\n\r\n## Custom Install Names\r\n\r\nIf you're a package author and need your package to be named differently when\r\ninstalled consider using the `installer-name` extra.\r\n\r\nFor example you have a package named `shama/cakephp-ftp` with the type\r\n`cakephp-plugin`. Installing with `composer/installers` would install to the\r\npath `Plugin/CakephpFtp`. Due to the strict naming conventions, you as a\r\npackage author actually need the package to be named and installed to\r\n`Plugin/Ftp`. Using the following config within your **package** `composer.json`\r\nwill allow this:\r\n\r\n``` json\r\n{\r\n    \"name\": \"shama/cakephp-ftp\",\r\n    \"type\": \"cakephp-plugin\",\r\n    \"extra\": {\r\n        \"installer-name\": \"Ftp\"\r\n    }\r\n}\r\n```\r\n\r\nPlease note the name entered into `installer-name` will be the final and will\r\nnot be inflected.\r\n\r\n## Contribute!\r\n\r\n* [Fork and clone](https://help.github.com/articles/fork-a-repo).\r\n* Run the command `php composer.phar install --dev` to install the dev\r\n  dependencies. See [Composer](https://github.com/composer/composer#installation--usage).\r\n* Use the command `phpunit` to run the tests. See [PHPUnit](http://phpunit.de).\r\n* Create a branch, commit, push and send us a\r\n  [pull request](https://help.github.com/articles/using-pull-requests).\r\n\r\nTo ensure a consistent code base, you should make sure the code follows the\r\n[Coding Standards](http://symfony.com/doc/2.0/contributing/code/standards.html)\r\nwhich we borrowed from Symfony.\r\n\r\nIf you would like to help, please take a look at the list of\r\n[issues](https://github.com/composer/installers/issues).\r\n\r\n","google":"UA-32631384-1","note":"Don't delete this file! It's used internally to help with page regeneration."}